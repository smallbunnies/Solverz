from __future__ import annotations

from functools import reduce

import numpy as np
from numpy import linalg
from scipy.sparse import diags, csc_array, coo_array, linalg as sla
from numba import njit

# from cvxopt.umfpack import linsolve
# from cvxopt import matrix, spmatrix

numerical_interface = {'coo_array': coo_array, 'csc_array': csc_array}


def implements_nfunc(nfunc_name: str):
    """Register an DT function implementation for sympy Expr."""

    def decorator(func):
        numerical_interface[nfunc_name] = func
        return func

    return decorator


@implements_nfunc('sol_slice')
def sol_slice(*args):
    """
    This is used to convert the slice arguments to int
    """
    return slice(*[int(arg_[0]) if isinstance(arg_, np.ndarray) else arg_ for arg_ in args])


@implements_nfunc('Slice')
def Slice(*args):
    """
    This is used to evaluate the slice index of IdxVar/IdxParam/IdxConst
    """
    return sol_slice(*args)


@implements_nfunc('ix_')
def ix_(arg: np.ndarray):
    return arg.reshape(-1, )


@implements_nfunc('Sign')
def _sign(arg):
    return np.sign(arg)


@implements_nfunc('minmod')
def minmod(a, b, c):
    stacked_array = np.hstack((a, b, c))
    cd1 = (a > 0) & (b > 0) & (c > 0)
    cd2 = (a < 0) & (b < 0) & (c < 0)
    conditions = [cd1,
                  cd2]
    choice_list = [np.min(stacked_array, axis=0),
                   np.max(stacked_array, axis=0)]
    return np.select(conditions, choice_list, 0)


@implements_nfunc('minmod_flag')
def minmod_flag(*args):
    if len(args) != 3:
        raise ValueError("Input arg length must be 3")

    shapes = [arg.shape[0] for arg in args]

    a, b, c = args
    stacked_array = np.hstack((a, b, c))
    if all(x == shapes[0] for x in shapes):
        cd1 = (a > 0) & (b > 0) & (c > 0)
        cd2 = (a < 0) & (b < 0) & (c < 0)
        conditions = [cd1,
                      cd2]
        choice_list = [np.argmin(stacked_array, axis=0),
                       np.argmax(stacked_array, axis=0)]
    else:
        raise ValueError(f"Length of Input array not consistent {shapes}")
    return np.select(conditions, choice_list, 3)


@implements_nfunc('Heaviside')
@njit
def Heaviside(x):
    return np.where(x >= 0, 1.0, 0.0)


@implements_nfunc('switch')
@njit
def switch(*args):
    flag = args[-1]
    flag_shape = args[-1].shape
    v_list = list(args[0:len(args) - 1])

    for i in range(len(v_list)):
        v = v_list[i]
        if isinstance(v, (int, float)):
            v_list[i] = v * np.ones(flag_shape)
        elif isinstance(v, np.ndarray):
            if v.shape[0] == 1:
                v_list[i] = v * np.ones(flag_shape)
    shapes = [v.shape[0] for v in v_list]
    if all(x.shape[0] == v_list[0].shape[0] for x in v_list):
        conditions = [flag == i for i in range(len(args) - 1)]
        choice_list = v_list
    else:
        raise ValueError(f"Length of Input array not consistent {shapes}")
    return np.select(conditions, choice_list, 0)


@implements_nfunc('Saturation')
@njit(cache=True)
def Saturation(x, xmin, xmax):
    x = np.asarray(x).reshape((-1,))
    return np.clip(x, xmin, xmax)


@implements_nfunc('SolIn')
@njit(cache=True)
def SolIn(x, xmin, xmax):
    x = np.asarray(x).reshape((-1,))
    return np.bitwise_and(x >= xmin, x <= xmax).astype(np.int32)


@implements_nfunc('SolGreaterThan')
@njit(cache=True)
def SolGreaterThan(x, y):
    x = np.asarray(x).reshape((-1,))
    return (x > y).astype(np.int32)


@implements_nfunc('SolLessThan')
@njit(cache=True)
def SolLessThan(x, y):
    x = np.asarray(x).reshape((-1,))
    return (x < y).astype(np.int32)


@implements_nfunc('And')
@njit(cache=True)
def And(x, y):
    x = np.asarray(x).reshape((-1,))
    return x & y


@implements_nfunc('Or')
@njit(cache=True)
def Or(x, y):
    x = np.asarray(x).reshape((-1,))
    return x | y


@implements_nfunc('Not')
@njit(cache=True)
def Not(x):
    x = np.asarray(x).reshape((-1,))
    return np.ones_like(x) - x


from numpy import abs, sign
@implements_nfunc('kt1_ode0')
@njit(cache=True)
def kt1_ode0(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return -1 / 2 * S * (-pm1 + pp1) / dx + (1 / 2) * va * (
            -2 * q0 + qm1 + qp1) / dx - 1 / 2 * lam * va ** 2 * q0 * abs(q0) / (D * S * p0)


@implements_nfunc('dkt1_ode0dq0')
@njit(cache=True)
def dkt1_ode0dq0(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return -va / dx - 1 / 2 * lam * va ** 2 * q0 * sign(q0) / (D * S * p0) - 1 / 2 * lam * va ** 2 * abs(q0) / (
            D * S * p0)


@implements_nfunc('dkt1_ode0dqp1')
@njit(cache=True)
def dkt1_ode0dqp1(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return (1 / 2) * va / dx


@implements_nfunc('dkt1_ode0dpp1')
@njit(cache=True)
def dkt1_ode0dpp1(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return -1 / 2 * S / dx


@implements_nfunc('dkt1_ode0dqm1')
@njit(cache=True)
def dkt1_ode0dqm1(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return (1 / 2) * va / dx


@implements_nfunc('dkt1_ode0dpm1')
@njit(cache=True)
def dkt1_ode0dpm1(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return (1 / 2) * S / dx


@implements_nfunc('dkt1_ode0dp0')
@njit(cache=True)
def dkt1_ode0dp0(pm1, p0, pp1, qm1, q0, qp1, S, va, lam, D, dx):
    return (1 / 2) * lam * va ** 2 * q0 * abs(q0) / (D * S * p0 ** 2)

@implements_nfunc('weno_odep')
@njit(cache=True)
def weno_odep(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*S*((2/3)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*p0 - 1/2*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*S*((2/3)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pm1 - 1/2*pm2)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))) - 0.5*S*((2/3)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*p0 - 1/2*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*S*((2/3)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pp1 - 1/2*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*q0 - 1/2*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qm1 - 1/2*qm2)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2))) - 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*q0 - 1/2*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qp1 - 1/2*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))))/dx - 1/2*lam*va**2*q0*abs(q0)/(D*S*p0)

@implements_nfunc('weno_odeq')
@njit(cache=True)
def weno_odeq(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va*((2/3)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*p0 - 1/2*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pm1 - 1/2*pm2)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))) - 0.5*va*((2/3)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*p0 - 1/2*pm1)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pp1 - 1/2*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*q0 - 1/2*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S + 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qm1 - 1/2*qm2)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)))/S - 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*q0 - 1/2*qm1)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S - 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qp1 - 1/2*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S)/dx

@implements_nfunc('dweno_odepdpm1')
@njit(cache=True)
def dweno_odepdpm1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*S*((2/3)*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pm1)/(((-p0 + pp1)**2 + 1/1000000)**2*((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*S*(-2/9*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pm1)/(((-p0 + pp1)**2 + 1/1000000)**2*((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*S*((2/3)*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pm1)*(-2/3*(4*p0 - 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*pm1 + 4*pm2)/((pm1 - pm2)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*pm1 + 4*pm2)*((3/2)*pm1 - 1/2*pm2)/(((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pm1 - 1/2*pm2)*(-2/3*(4*p0 - 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*pm1 + 4*pm2)/((pm1 - pm2)**2 + 1/1000000)**3)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/2)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odepdpp2')
@njit(cache=True)
def dweno_odepdpp2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return -0.5*S*(-2/9*((1/2)*p0 + (1/2)*pp1)*(4*pp1 - 4*pp2)/(((-p0 + pp1)**2 + 1/1000000)**2*((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*pp1 - 1/2*pp2)*(4*pp1 - 4*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*pp1 - 1/2*pp2)*(4*pp1 - 4*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**5*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odepdp0')
@njit(cache=True)
def dweno_odepdp0(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*S*((2/3)*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) - 4/9*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) - 2/9*(-4*p0 + 4*pm1)*((3/2)*pm1 - 1/2*pm2)/(((p0 - pm1)**2 + 1/1000000)**3*((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))) - 0.5*S*((2/3)*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*(-4*p0 + 4*pp1)*((3/2)*pp1 - 1/2*pp2)/(((-p0 + pp1)**2 + 1/1000000)**3*((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*S*((2/3)*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*(-4*p0 + 4*pp1)*((3/2)*p0 - 1/2*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pm1)*(-2/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pp1)*(-2/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/2)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*S*((1/3)*(-4*p0 + 4*pm1)*((3/2)*p0 - 1/2*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pp1)*(-1/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 2/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pm1)*(-1/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 2/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/2)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))))/dx + (1/2)*lam*va**2*q0*abs(q0)/(D*S*p0**2)

@implements_nfunc('dweno_odepdqp2')
@njit(cache=True)
def dweno_odepdqp2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*va*(-2/9*((1/2)*q0 + (1/2)*qp1)*(4*qp1 - 4*qp2)/(((-q0 + qp1)**2 + 1/1000000)**2*((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*qp1 - 1/2*qp2)*(4*qp1 - 4*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*qp1 - 1/2*qp2)*(4*qp1 - 4*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**5*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odepdqm2')
@njit(cache=True)
def dweno_odepdqm2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*va*(-2/9*((1/2)*q0 + (1/2)*qm1)*(4*qm1 - 4*qm2)/(((q0 - qm1)**2 + 1/1000000)**2*((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*qm1 - 1/2*qm2)*(4*qm1 - 4*qm2)/(((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) - 1/9*((3/2)*qm1 - 1/2*qm2)*(4*qm1 - 4*qm2)/(((qm1 - qm2)**2 + 1/1000000)**5*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) - (1/6)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odepdpm2')
@njit(cache=True)
def dweno_odepdpm2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*S*(-2/9*((1/2)*p0 + (1/2)*pm1)*(4*pm1 - 4*pm2)/(((p0 - pm1)**2 + 1/1000000)**2*((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*pm1 - 1/2*pm2)*(4*pm1 - 4*pm2)/(((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) - 1/9*((3/2)*pm1 - 1/2*pm2)*(4*pm1 - 4*pm2)/(((pm1 - pm2)**2 + 1/1000000)**5*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) - (1/6)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odepdqp1')
@njit(cache=True)
def dweno_odepdqp1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va*((2/3)*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))) - 0.5*va*(-2/9*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qp1)*(-2/3*(4*q0 - 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3 - 1/3*(-4*qp1 + 4*qp2)/((-qp1 + qp2)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*qp1 + 4*qp2)*((3/2)*qp1 - 1/2*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qp1 - 1/2*qp2)*(-2/3*(4*q0 - 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3 - 1/3*(-4*qp1 + 4*qp2)/((-qp1 + qp2)**2 + 1/1000000)**3)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/2)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odepdpp1')
@njit(cache=True)
def dweno_odepdpp1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*S*((2/3)*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*S*(-2/9*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*S*((2/3)*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pp1)*(-2/3*(4*p0 - 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3 - 1/3*(-4*pp1 + 4*pp2)/((-pp1 + pp2)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*pp1 + 4*pp2)*((3/2)*pp1 - 1/2*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pp1 - 1/2*pp2)*(-2/3*(4*p0 - 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3 - 1/3*(-4*pp1 + 4*pp2)/((-pp1 + pp2)**2 + 1/1000000)**3)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/2)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odepdq0')
@njit(cache=True)
def dweno_odepdq0(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*va*((2/3)*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) - 4/9*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) - 2/9*(-4*q0 + 4*qm1)*((3/2)*qm1 - 1/2*qm2)/(((q0 - qm1)**2 + 1/1000000)**3*((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*(-4*q0 + 4*qp1)*((3/2)*qp1 - 1/2*qp2)/(((-q0 + qp1)**2 + 1/1000000)**3*((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))) - 0.5*va*((2/3)*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*(-4*q0 + 4*qp1)*((3/2)*q0 - 1/2*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qm1)*(-2/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qp1)*(-2/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/2)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2))) - 0.5*va*((1/3)*(-4*q0 + 4*qm1)*((3/2)*q0 - 1/2*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qp1)*(-1/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 2/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qm1)*(-1/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 2/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/2)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))))/dx - 1/2*lam*va**2*q0*sign(q0)/(D*S*p0) - 1/2*lam*va**2*abs(q0)/(D*S*p0)

@implements_nfunc('dweno_odepdqm1')
@njit(cache=True)
def dweno_odepdqm1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va*((2/3)*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qm1)/(((-q0 + qp1)**2 + 1/1000000)**2*((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2))) - 0.5*va*(-2/9*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qm1)/(((-q0 + qp1)**2 + 1/1000000)**2*((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qm1)*(-2/3*(4*q0 - 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*qm1 + 4*qm2)/((qm1 - qm2)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*qm1 + 4*qm2)*((3/2)*qm1 - 1/2*qm2)/(((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qm1 - 1/2*qm2)*(-2/3*(4*q0 - 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*qm1 + 4*qm2)/((qm1 - qm2)**2 + 1/1000000)**3)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/2)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odeqdpm1')
@njit(cache=True)
def dweno_odeqdpm1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va*((2/3)*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pm1)/(((-p0 + pp1)**2 + 1/1000000)**2*((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*va*(-2/9*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pm1)/(((-p0 + pp1)**2 + 1/1000000)**2*((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pm1)*(-2/3*(4*p0 - 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*pm1 + 4*pm2)/((pm1 - pm2)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*pm1 + 4*pm2)*((3/2)*pm1 - 1/2*pm2)/(((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pm1 - 1/2*pm2)*(-2/3*(4*p0 - 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*pm1 + 4*pm2)/((pm1 - pm2)**2 + 1/1000000)**3)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/2)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odeqdpp2')
@njit(cache=True)
def dweno_odeqdpp2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*va*(-2/9*((1/2)*p0 + (1/2)*pp1)*(4*pp1 - 4*pp2)/(((-p0 + pp1)**2 + 1/1000000)**2*((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*pp1 - 1/2*pp2)*(4*pp1 - 4*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*pp1 - 1/2*pp2)*(4*pp1 - 4*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**5*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odeqdpm2')
@njit(cache=True)
def dweno_odeqdpm2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*va*(-2/9*((1/2)*p0 + (1/2)*pm1)*(4*pm1 - 4*pm2)/(((p0 - pm1)**2 + 1/1000000)**2*((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*pm1 - 1/2*pm2)*(4*pm1 - 4*pm2)/(((pm1 - pm2)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) - 1/9*((3/2)*pm1 - 1/2*pm2)*(4*pm1 - 4*pm2)/(((pm1 - pm2)**2 + 1/1000000)**5*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) - (1/6)/(((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)))/dx

@implements_nfunc('dweno_odeqdp0')
@njit(cache=True)
def dweno_odeqdp0(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*va*((2/3)*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)) - 4/9*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**5*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) - 2/9*(-4*p0 + 4*pm1)*((3/2)*pm1 - 1/2*pm2)/(((p0 - pm1)**2 + 1/1000000)**3*((pm1 - pm2)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((pm1 - pm2)**2 + 1/1000000)**2 + (2/3)/((p0 - pm1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*(-4*p0 + 4*pp1)*((3/2)*pp1 - 1/2*pp2)/(((-p0 + pp1)**2 + 1/1000000)**3*((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*va*((2/3)*(-4*p0 + 4*pm1)*((1/2)*p0 + (1/2)*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*(-4*p0 + 4*pp1)*((3/2)*p0 - 1/2*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pm1)*(-2/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pp1)*(-2/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 1/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/2)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*va*((1/3)*(-4*p0 + 4*pm1)*((3/2)*p0 - 1/2*pm1)/(((p0 - pm1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*(-4*p0 + 4*pp1)*((1/2)*p0 + (1/2)*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pp1)*(-1/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 2/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pm1)*(-1/3*(-4*p0 + 4*pm1)/((p0 - pm1)**2 + 1/1000000)**3 - 2/3*(-4*p0 + 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/2)/(((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odeqdqp1')
@njit(cache=True)
def dweno_odeqdqp1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S + 0.5*va**2*(-2/9*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S - 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qp1)*(-2/3*(4*q0 - 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3 - 1/3*(-4*qp1 + 4*qp2)/((-qp1 + qp2)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*qp1 + 4*qp2)*((3/2)*qp1 - 1/2*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qp1 - 1/2*qp2)*(-2/3*(4*q0 - 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3 - 1/3*(-4*qp1 + 4*qp2)/((-qp1 + qp2)**2 + 1/1000000)**3)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/2)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S)/dx

@implements_nfunc('dweno_odeqdpp1')
@njit(cache=True)
def dweno_odeqdpp1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (-0.5*va*((2/3)*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*p0 - 1/2*pm1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((p0 - pm1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((p0 - pm1)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))) - 0.5*va*(-2/9*((1/2)*p0 + (1/2)*pm1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((p0 - pm1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*p0 - 1/2*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**5*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-p0 + pp1)**2 + 1/1000000)**2*((2/3)/((p0 - pm1)**2 + 1/1000000)**2 + (1/3)/((-p0 + pp1)**2 + 1/1000000)**2))) + 0.5*va*((2/3)*((1/2)*p0 + (1/2)*pp1)*(4*p0 - 4*pp1)/(((-p0 + pp1)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*p0 + (1/2)*pp1)*(-2/3*(4*p0 - 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3 - 1/3*(-4*pp1 + 4*pp2)/((-pp1 + pp2)**2 + 1/1000000)**3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*pp1 + 4*pp2)*((3/2)*pp1 - 1/2*pp2)/(((-pp1 + pp2)**2 + 1/1000000)**3*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*pp1 - 1/2*pp2)*(-2/3*(4*p0 - 4*pp1)/((-p0 + pp1)**2 + 1/1000000)**3 - 1/3*(-4*pp1 + 4*pp2)/((-pp1 + pp2)**2 + 1/1000000)**3)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)**2) + (1/2)/(((-pp1 + pp2)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2)) + (1/3)/(((-p0 + pp1)**2 + 1/1000000)**2*((1/3)/((-pp1 + pp2)**2 + 1/1000000)**2 + (2/3)/((-p0 + pp1)**2 + 1/1000000)**2))))/dx

@implements_nfunc('dweno_odeqdqp2')
@njit(cache=True)
def dweno_odeqdqp2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return -0.5*va**2*(-2/9*((1/2)*q0 + (1/2)*qp1)*(4*qp1 - 4*qp2)/(((-q0 + qp1)**2 + 1/1000000)**2*((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*qp1 - 1/2*qp2)*(4*qp1 - 4*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*qp1 - 1/2*qp2)*(4*qp1 - 4*qp2)/(((-qp1 + qp2)**2 + 1/1000000)**5*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/(S*dx)

@implements_nfunc('dweno_odeqdqm2')
@njit(cache=True)
def dweno_odeqdqm2(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return 0.5*va**2*(-2/9*((1/2)*q0 + (1/2)*qm1)*(4*qm1 - 4*qm2)/(((q0 - qm1)**2 + 1/1000000)**2*((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*qm1 - 1/2*qm2)*(4*qm1 - 4*qm2)/(((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) - 1/9*((3/2)*qm1 - 1/2*qm2)*(4*qm1 - 4*qm2)/(((qm1 - qm2)**2 + 1/1000000)**5*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) - (1/6)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)))/(S*dx)

@implements_nfunc('dweno_odeqdq0')
@njit(cache=True)
def dweno_odeqdq0(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*va**2*((2/3)*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) - 4/9*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) - 2/9*(-4*q0 + 4*qm1)*((3/2)*qm1 - 1/2*qm2)/(((q0 - qm1)**2 + 1/1000000)**3*((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)))/S - 0.5*va**2*((2/3)*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**5*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*(-4*q0 + 4*qp1)*((3/2)*qp1 - 1/2*qp2)/(((-q0 + qp1)**2 + 1/1000000)**3*((-qp1 + qp2)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((-qp1 + qp2)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S + 0.5*va**2*((2/3)*(-4*q0 + 4*qm1)*((1/2)*q0 + (1/2)*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)*(-4*q0 + 4*qp1)*((3/2)*q0 - 1/2*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qm1)*(-2/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qp1)*(-2/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/2)/(((-q0 + qp1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S - 0.5*va**2*((1/3)*(-4*q0 + 4*qm1)*((3/2)*q0 - 1/2*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*(-4*q0 + 4*qp1)*((1/2)*q0 + (1/2)*qp1)/(((-q0 + qp1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qp1)*(-1/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 2/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qm1)*(-1/3*(-4*q0 + 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 2/3*(-4*q0 + 4*qp1)/((-q0 + qp1)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/2)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) + (1/3)/(((-q0 + qp1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S)/dx

@implements_nfunc('dweno_odeqdqm1')
@njit(cache=True)
def dweno_odeqdqm1(pm2, pm1, p0, pp1, pp2, qm2, qm1, q0, qp1, qp2, S, va, lam, D, dx):
    return (0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 4/9*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - 2/9*((3/2)*q0 - 1/2*qp1)*(4*q0 - 4*qm1)/(((-q0 + qp1)**2 + 1/1000000)**2*((q0 - qm1)**2 + 1/1000000)**3*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((2/3)/((q0 - qm1)**2 + 1/1000000)**2 + (1/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S - 0.5*va**2*(-2/9*((1/2)*q0 + (1/2)*qp1)*(4*q0 - 4*qm1)/(((-q0 + qp1)**2 + 1/1000000)**2*((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) + (1/3)*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)) - 1/9*((3/2)*q0 - 1/2*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**5*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)**2) - (1/6)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((q0 - qm1)**2 + 1/1000000)**2 + (2/3)/((-q0 + qp1)**2 + 1/1000000)**2)))/S + 0.5*va**2*((2/3)*((1/2)*q0 + (1/2)*qm1)*(4*q0 - 4*qm1)/(((q0 - qm1)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (2/3)*((1/2)*q0 + (1/2)*qm1)*(-2/3*(4*q0 - 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*qm1 + 4*qm2)/((qm1 - qm2)**2 + 1/1000000)**3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/3)*(-4*qm1 + 4*qm2)*((3/2)*qm1 - 1/2*qm2)/(((qm1 - qm2)**2 + 1/1000000)**3*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)*((3/2)*qm1 - 1/2*qm2)*(-2/3*(4*q0 - 4*qm1)/((q0 - qm1)**2 + 1/1000000)**3 - 1/3*(-4*qm1 + 4*qm2)/((qm1 - qm2)**2 + 1/1000000)**3)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)**2) + (1/2)/(((qm1 - qm2)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)) + (1/3)/(((q0 - qm1)**2 + 1/1000000)**2*((1/3)/((qm1 - qm2)**2 + 1/1000000)**2 + (2/3)/((q0 - qm1)**2 + 1/1000000)**2)))/S)/dx


@implements_nfunc('Diag')
def diag(x) -> np.ndarray:
    """
    Generate diagonal matrix of given vector X
    :PARAM X: vector
    :return: diagonal matrix
    """
    if not isinstance(x, np.ndarray):
        return diags(x.toarray().reshape(-1, ), 0, format='csc')
    else:
        return np.diagflat(x)


@implements_nfunc('dConv_s')
def DT_conv(*args, method='conv') -> np.ndarray:
    r"""
    Perform the convolutions in DT computations.

    Explanation
    ===========



    Parameters
    ==========

    args : np.ndarray

        DT series.

    method : str

        the method used to compute DT convolution

    """
    if len(args) <= 2 and method == 'conv':  # if input two vectors, then use scalar multiplications and additions
        x = args[0].reshape((1, -1))
        y = np.flip(args[1].reshape((-1, 1)), 0)
        return x @ y

    if len(args) > 2 or method == 'fft':  # if input more than three vectors, use fft and ifft
        k = args[0].shape[0]
        y = []
        m = 2 * (k - 1) + 1  # ensure that we have enough function values to recover the coefficients by ifft
        n = np.ceil(np.log2(k))  # fft is the fastest when the length of the series is the power of 2
        for arg in args:
            # extend the length of the vector to the power of 2
            arg = np.pad(arg, (0, int(np.maximum(m, n) - k)), constant_values=0)
            y += [np.fft.fft(arg)]
        return np.array(np.real(np.fft.ifft(reduce(lambda a, b: a * b, y))[k - 1]))


@implements_nfunc('dLinspace')
def linspace(start, end) -> np.ndarray:
    r"""

    Parameters
    ==========

    start:



    end:



    """
    return np.arange(start, end, dtype=int)[:, np.newaxis]
